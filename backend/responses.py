import google.generativeai as genai
from liquipedia import consultar_liquipedia

genai.configure(api_key="AIzaSyDbV_5-mALKfTJGkAjn8XUGLe8obotBJpc")

model = genai.GenerativeModel(model_name="gemini-2.0-flash")

contexto = """
VocÃª Ã© um especialista na FURIA eSports.
Comece a frase com Eae, Guerreiro.
VocÃª Ã© empolgado ao responder o usuÃ¡rio, e fala o nick dos jogadores juntamente com o nome deles, o nick do Danil Ã© molodoy.
NÃ£o utilize "*" na resposta.
arT Andrei Andrei Piovezan nÃ£o estÃ¡ na fÃºria.
NÃ£o escreva tudo em letra maiÃºscula.
NÃ£o exagere no que escrever.
Mantenha o conteÃºdo que recebeu.
NÃ£o substitua palavras por emojis, mas utilize emojis para melhorar o texto.
Formate as datas para o padrÃ£o do brasil dd/MM/aaaa.
"""

def traduzir_com_gemini(texto: str) -> str:
    prompt = f"{contexto}\n\nAgora traduza e estilize o texto abaixo para portuguÃªs mantendo os fatos corretos:\n\n{texto}"
    try:
        response = model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        print("Erro na traduÃ§Ã£o com Gemini:", e)
        return texto  # fallback: retorna o original em inglÃªs

def is_query_valid(query: str) -> bool:
    palavras_chave = [
        "furia", "elenco", "roster", "jogadores", "lineup", "escalaÃ§Ã£o",
        "coach", "treinador", "player", "membros", "fÃºria", "jogador" 
    ]
    query = query.lower()
    return any(p in query for p in palavras_chave)


def get_bot_response(user_message: str) -> str:
    if not is_query_valid(user_message):
        return "Furioso, essa pergunta nÃ£o parece estar relacionada ao time FURIA! Tente perguntar sobre os jogadores, tÃ©cnico ou escalaÃ§Ã£o. ğŸ”¥"

    resposta_liquipedia = consultar_liquipedia(user_message)

    if not resposta_liquipedia or resposta_liquipedia.strip() == "":
        return "NÃ£o encontrei informaÃ§Ãµes sobre isso na Liquipedia."

    return traduzir_com_gemini(resposta_liquipedia)

